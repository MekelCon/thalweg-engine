/*
 * Not used API
 * Just here to generate model of the thalweg engine
 *
 * The version of the OpenAPI document: 2024.01.01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.thalweg.engine.infra.data;

import com.badlogic.gdx.utils.Array;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.mapstruct.Mapper;
import org.mapstruct.control.DeepClone;
import org.mapstruct.factory.Mappers;

import java.util.Objects;

/**
 * FontConfigsData
 */
@JsonPropertyOrder({
        FontConfigsData.JSON_PROPERTY_FAMILY,
        FontConfigsData.JSON_PROPERTY_VARS
})
@JsonTypeName("FontConfigs")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FontConfigsData {
    public static final String JSON_PROPERTY_FAMILY = "family";
    public static final String JSON_PROPERTY_VARS = "vars";
    public Array<FontConfigData> family;
    public VarsData vars;

    public FontConfigsData() {
    }

    public FontConfigsData family(Array<FontConfigData> family) {

        this.family = family;
        return this;
    }

    public FontConfigsData addFamilyItem(FontConfigData familyItem) {
        if (this.family == null) {
            this.family = new Array<>();
        }
        this.family.add(familyItem);
        return this;
    }

    /**
     * Get family
     *
     * @return family
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FAMILY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Array<FontConfigData> getFamily() {
        return family;
    }


    @JsonProperty(JSON_PROPERTY_FAMILY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFamily(Array<FontConfigData> family) {
        this.family = family;
    }


    public FontConfigsData vars(VarsData vars) {

        this.vars = vars;
        return this;
    }

    /**
     * Get vars
     *
     * @return vars
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VARS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public VarsData getVars() {
        return vars;
    }


    @JsonProperty(JSON_PROPERTY_VARS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVars(VarsData vars) {
        this.vars = vars;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FontConfigsData fontConfigs = (FontConfigsData) o;
        return Objects.equals(this.family, fontConfigs.family) &&
                Objects.equals(this.vars, fontConfigs.vars);
    }

    @Override
    public int hashCode() {
        return Objects.hash(family, vars);
    }

    @Override
    public String toString() {
        String sb = "class FontConfigsData {\n" +
                "    family: " + toIndentedString(family) + "\n" +
                "    vars: " + toIndentedString(vars) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public FontConfigsData copy() {
        return Cloner.INSTANCE.clone(this);
    }

    @Mapper(mappingControl = DeepClone.class)
    public interface Cloner {
        Cloner INSTANCE = Mappers.getMapper(Cloner.class);

        FontConfigsData clone(FontConfigsData source);


        default Array<FontConfigData> mapFontConfigData(Array<FontConfigData> source) {
            if (source == null) {
                return null;
            }
            var res = new Array<>(source.size);
            for (FontConfigData t : source.toArray())
                res.add(FontConfigData.Cloner.INSTANCE.clone(t));
            return new Array<>(source);
        }

        default VarsData mapVarsData(VarsData source) {
            return VarsData.Cloner.INSTANCE.clone(source);
        }
    }

}

