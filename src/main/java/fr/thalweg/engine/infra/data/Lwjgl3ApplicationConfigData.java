/*
 * Not used API
 * Just here to generate model of the thalweg engine
 *
 * The version of the OpenAPI document: 2024.01.01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.thalweg.engine.infra.data;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.mapstruct.Mapper;
import org.mapstruct.control.DeepClone;
import org.mapstruct.factory.Mappers;

import java.util.Objects;

/**
 * Lwjgl3ApplicationConfigData
 */
@JsonPropertyOrder({
        Lwjgl3ApplicationConfigData.JSON_PROPERTY_TITLE,
        Lwjgl3ApplicationConfigData.JSON_PROPERTY_WINDOWED,
        Lwjgl3ApplicationConfigData.JSON_PROPERTY_USE_V_SYNC,
        Lwjgl3ApplicationConfigData.JSON_PROPERTY_FOREGROUND_F_P_S
})
@JsonTypeName("Lwjgl3ApplicationConfig")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Lwjgl3ApplicationConfigData {
    public static final String JSON_PROPERTY_TITLE = "title";
    public static final String JSON_PROPERTY_WINDOWED = "windowed";
    public static final String JSON_PROPERTY_USE_V_SYNC = "useVSync";
    public static final String JSON_PROPERTY_FOREGROUND_F_P_S = "foregroundFPS";
    public String title = "My Thalweg Game";
    public WidthAndHeightData windowed;
    public Boolean useVSync = true;
    public int foregroundFPS = 60;

    public Lwjgl3ApplicationConfigData() {
    }

    public Lwjgl3ApplicationConfigData title(String title) {

        this.title = title;
        return this;
    }

    /**
     * Get title
     *
     * @return title
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getTitle() {
        return title;
    }


    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTitle(String title) {
        this.title = title;
    }


    public Lwjgl3ApplicationConfigData windowed(WidthAndHeightData windowed) {

        this.windowed = windowed;
        return this;
    }

    /**
     * Get windowed
     *
     * @return windowed
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WINDOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public WidthAndHeightData getWindowed() {
        return windowed;
    }


    @JsonProperty(JSON_PROPERTY_WINDOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWindowed(WidthAndHeightData windowed) {
        this.windowed = windowed;
    }


    public Lwjgl3ApplicationConfigData useVSync(Boolean useVSync) {

        this.useVSync = useVSync;
        return this;
    }

    /**
     * Get useVSync
     *
     * @return useVSync
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USE_V_SYNC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean isUseVSync() {
        return useVSync;
    }


    @JsonProperty(JSON_PROPERTY_USE_V_SYNC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUseVSync(Boolean useVSync) {
        this.useVSync = useVSync;
    }


    public Lwjgl3ApplicationConfigData foregroundFPS(int foregroundFPS) {

        this.foregroundFPS = foregroundFPS;
        return this;
    }

    /**
     * Get foregroundFPS
     * minimum: 0
     *
     * @return foregroundFPS
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FOREGROUND_F_P_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public int getForegroundFPS() {
        return foregroundFPS;
    }


    @JsonProperty(JSON_PROPERTY_FOREGROUND_F_P_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setForegroundFPS(int foregroundFPS) {
        this.foregroundFPS = foregroundFPS;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Lwjgl3ApplicationConfigData lwjgl3ApplicationConfig = (Lwjgl3ApplicationConfigData) o;
        return Objects.equals(this.title, lwjgl3ApplicationConfig.title) &&
                Objects.equals(this.windowed, lwjgl3ApplicationConfig.windowed) &&
                Objects.equals(this.useVSync, lwjgl3ApplicationConfig.useVSync) &&
                Objects.equals(this.foregroundFPS, lwjgl3ApplicationConfig.foregroundFPS);
    }

    @Override
    public int hashCode() {
        return Objects.hash(title, windowed, useVSync, foregroundFPS);
    }

    @Override
    public String toString() {
        String sb = "class Lwjgl3ApplicationConfigData {\n" +
                "    title: " + toIndentedString(title) + "\n" +
                "    windowed: " + toIndentedString(windowed) + "\n" +
                "    useVSync: " + toIndentedString(useVSync) + "\n" +
                "    foregroundFPS: " + toIndentedString(foregroundFPS) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public Lwjgl3ApplicationConfigData copy() {
        return Cloner.INSTANCE.clone(this);
    }

    @Mapper(mappingControl = DeepClone.class)
    public interface Cloner {
        Cloner INSTANCE = Mappers.getMapper(Cloner.class);

        Lwjgl3ApplicationConfigData clone(Lwjgl3ApplicationConfigData source);


        default WidthAndHeightData mapWidthAndHeightData(WidthAndHeightData source) {
            return WidthAndHeightData.Cloner.INSTANCE.clone(source);
        }
    }

}

