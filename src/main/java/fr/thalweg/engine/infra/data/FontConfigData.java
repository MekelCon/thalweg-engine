/*
 * Not used API
 * Just here to generate model of the thalweg engine
 *
 * The version of the OpenAPI document: 2024.01.01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.thalweg.engine.infra.data;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.mapstruct.Mapper;
import org.mapstruct.control.DeepClone;
import org.mapstruct.factory.Mappers;

import java.util.Objects;

/**
 * FontConfigData
 */
@JsonPropertyOrder({
        FontConfigData.JSON_PROPERTY_NAME,
        FontConfigData.JSON_PROPERTY_SOURCE,
        FontConfigData.JSON_PROPERTY_SIZE,
        FontConfigData.JSON_PROPERTY_BORDER_SIZE,
        FontConfigData.JSON_PROPERTY_X_ADJUST,
        FontConfigData.JSON_PROPERTY_Y_ADJUST,
        FontConfigData.JSON_PROPERTY_WIDTH_ADJUST,
        FontConfigData.JSON_PROPERTY_HEIGHT_ADJUST
})
@JsonTypeName("FontConfig")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FontConfigData {
    public static final String JSON_PROPERTY_NAME = "name";
    public static final String JSON_PROPERTY_SOURCE = "source";
    public static final String JSON_PROPERTY_SIZE = "size";
    public static final String JSON_PROPERTY_BORDER_SIZE = "borderSize";
    public static final String JSON_PROPERTY_X_ADJUST = "xAdjust";
    public static final String JSON_PROPERTY_Y_ADJUST = "yAdjust";
    public static final String JSON_PROPERTY_WIDTH_ADJUST = "widthAdjust";
    public static final String JSON_PROPERTY_HEIGHT_ADJUST = "heightAdjust";
    public String name;
    public String source;
    public int size = 12;
    public int borderSize = 1;
    public float xAdjust = 0f;
    public float yAdjust = 0f;
    public float widthAdjust = 0f;
    public float heightAdjust = 0f;

    public FontConfigData() {
    }

    public FontConfigData name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name to retrieve the font. It should be unique. Use &#39;default&#39; to override the default font.
     *
     * @return name
     **/
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName() {
        return name;
    }


    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }


    public FontConfigData source(String source) {

        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     **/
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getSource() {
        return source;
    }


    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSource(String source) {
        this.source = source;
    }


    public FontConfigData size(int size) {

        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public int getSize() {
        return size;
    }


    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSize(int size) {
        this.size = size;
    }


    public FontConfigData borderSize(int borderSize) {

        this.borderSize = borderSize;
        return this;
    }

    /**
     * Get borderSize
     *
     * @return borderSize
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BORDER_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public int getBorderSize() {
        return borderSize;
    }


    @JsonProperty(JSON_PROPERTY_BORDER_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBorderSize(int borderSize) {
        this.borderSize = borderSize;
    }


    public FontConfigData xAdjust(float xAdjust) {

        this.xAdjust = xAdjust;
        return this;
    }

    /**
     * Get xAdjust
     *
     * @return xAdjust
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_X_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public float getxAdjust() {
        return xAdjust;
    }


    @JsonProperty(JSON_PROPERTY_X_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setxAdjust(float xAdjust) {
        this.xAdjust = xAdjust;
    }


    public FontConfigData yAdjust(float yAdjust) {

        this.yAdjust = yAdjust;
        return this;
    }

    /**
     * Get yAdjust
     *
     * @return yAdjust
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_Y_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public float getyAdjust() {
        return yAdjust;
    }


    @JsonProperty(JSON_PROPERTY_Y_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setyAdjust(float yAdjust) {
        this.yAdjust = yAdjust;
    }


    public FontConfigData widthAdjust(float widthAdjust) {

        this.widthAdjust = widthAdjust;
        return this;
    }

    /**
     * Get widthAdjust
     *
     * @return widthAdjust
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WIDTH_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public float getWidthAdjust() {
        return widthAdjust;
    }


    @JsonProperty(JSON_PROPERTY_WIDTH_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWidthAdjust(float widthAdjust) {
        this.widthAdjust = widthAdjust;
    }


    public FontConfigData heightAdjust(float heightAdjust) {

        this.heightAdjust = heightAdjust;
        return this;
    }

    /**
     * Get heightAdjust
     *
     * @return heightAdjust
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_HEIGHT_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public float getHeightAdjust() {
        return heightAdjust;
    }


    @JsonProperty(JSON_PROPERTY_HEIGHT_ADJUST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHeightAdjust(float heightAdjust) {
        this.heightAdjust = heightAdjust;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FontConfigData fontConfig = (FontConfigData) o;
        return Objects.equals(this.name, fontConfig.name) &&
                Objects.equals(this.source, fontConfig.source) &&
                Objects.equals(this.size, fontConfig.size) &&
                Objects.equals(this.borderSize, fontConfig.borderSize) &&
                Objects.equals(this.xAdjust, fontConfig.xAdjust) &&
                Objects.equals(this.yAdjust, fontConfig.yAdjust) &&
                Objects.equals(this.widthAdjust, fontConfig.widthAdjust) &&
                Objects.equals(this.heightAdjust, fontConfig.heightAdjust);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, source, size, borderSize, xAdjust, yAdjust, widthAdjust, heightAdjust);
    }

    @Override
    public String toString() {
        String sb = "class FontConfigData {\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    source: " + toIndentedString(source) + "\n" +
                "    size: " + toIndentedString(size) + "\n" +
                "    borderSize: " + toIndentedString(borderSize) + "\n" +
                "    xAdjust: " + toIndentedString(xAdjust) + "\n" +
                "    yAdjust: " + toIndentedString(yAdjust) + "\n" +
                "    widthAdjust: " + toIndentedString(widthAdjust) + "\n" +
                "    heightAdjust: " + toIndentedString(heightAdjust) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public FontConfigData copy() {
        return Cloner.INSTANCE.clone(this);
    }

    @Mapper(mappingControl = DeepClone.class)
    public interface Cloner {
        Cloner INSTANCE = Mappers.getMapper(Cloner.class);

        FontConfigData clone(FontConfigData source);


    }

}

