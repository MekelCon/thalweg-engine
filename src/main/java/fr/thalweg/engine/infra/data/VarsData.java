/*
 * Not used API
 * Just here to generate model of the thalweg engine
 *
 * The version of the OpenAPI document: 2024.01.01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.thalweg.engine.infra.data;

import com.badlogic.gdx.utils.Array;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.mapstruct.Mapper;
import org.mapstruct.control.DeepClone;
import org.mapstruct.factory.Mappers;

import java.util.Objects;

/**
 * VarsData
 */
@JsonPropertyOrder({
        VarsData.JSON_PROPERTY_EXISTING,
        VarsData.JSON_PROPERTY_CUSTOM
})
@JsonTypeName("Vars")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VarsData {
    public static final String JSON_PROPERTY_EXISTING = "existing";
    public static final String JSON_PROPERTY_CUSTOM = "custom";
    public VarsExistingData existing;
    public Array<CustomVarData> custom;

    public VarsData() {
    }

    public VarsData existing(VarsExistingData existing) {

        this.existing = existing;
        return this;
    }

    /**
     * Get existing
     *
     * @return existing
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_EXISTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public VarsExistingData getExisting() {
        return existing;
    }


    @JsonProperty(JSON_PROPERTY_EXISTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExisting(VarsExistingData existing) {
        this.existing = existing;
    }


    public VarsData custom(Array<CustomVarData> custom) {

        this.custom = custom;
        return this;
    }

    public VarsData addCustomItem(CustomVarData customItem) {
        if (this.custom == null) {
            this.custom = new Array<>();
        }
        this.custom.add(customItem);
        return this;
    }

    /**
     * Get custom
     *
     * @return custom
     **/
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Array<CustomVarData> getCustom() {
        return custom;
    }


    @JsonProperty(JSON_PROPERTY_CUSTOM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustom(Array<CustomVarData> custom) {
        this.custom = custom;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VarsData vars = (VarsData) o;
        return Objects.equals(this.existing, vars.existing) &&
                Objects.equals(this.custom, vars.custom);
    }

    @Override
    public int hashCode() {
        return Objects.hash(existing, custom);
    }

    @Override
    public String toString() {
        String sb = "class VarsData {\n" +
                "    existing: " + toIndentedString(existing) + "\n" +
                "    custom: " + toIndentedString(custom) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public VarsData copy() {
        return Cloner.INSTANCE.clone(this);
    }

    @Mapper(mappingControl = DeepClone.class)
    public interface Cloner {
        Cloner INSTANCE = Mappers.getMapper(Cloner.class);

        VarsData clone(VarsData source);


        default VarsExistingData mapVarsExistingData(VarsExistingData source) {
            return VarsExistingData.Cloner.INSTANCE.clone(source);
        }

        default Array<CustomVarData> mapCustomVarData(Array<CustomVarData> source) {
            if (source == null) {
                return null;
            }
            var res = new Array<>(source.size);
            for (CustomVarData t : source.toArray())
                res.add(CustomVarData.Cloner.INSTANCE.clone(t));
            return new Array<>(source);
        }
    }

}

